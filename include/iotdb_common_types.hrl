%%
%% Autogenerated by Thrift Compiler (0.19.0)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-ifndef(_iotdb_common_types_included).
-define(_iotdb_common_types_included, yeah).

-define(Iotdb_common_TConsensusGroupType_ConfigRegion, 0).
-define(Iotdb_common_TConsensusGroupType_DataRegion, 1).
-define(Iotdb_common_TConsensusGroupType_SchemaRegion, 2).

-define(Iotdb_common_TRegionMigrateFailedType_AddPeerFailed, 0).
-define(Iotdb_common_TRegionMigrateFailedType_RemovePeerFailed, 1).
-define(Iotdb_common_TRegionMigrateFailedType_RemoveConsensusGroupFailed, 2).
-define(Iotdb_common_TRegionMigrateFailedType_DeleteRegionFailed, 3).
-define(Iotdb_common_TRegionMigrateFailedType_CreateRegionFailed, 4).

-define(Iotdb_common_TAggregationType_COUNT, 0).
-define(Iotdb_common_TAggregationType_AVG, 1).
-define(Iotdb_common_TAggregationType_SUM, 2).
-define(Iotdb_common_TAggregationType_FIRST_VALUE, 3).
-define(Iotdb_common_TAggregationType_LAST_VALUE, 4).
-define(Iotdb_common_TAggregationType_MAX_TIME, 5).
-define(Iotdb_common_TAggregationType_MIN_TIME, 6).
-define(Iotdb_common_TAggregationType_MAX_VALUE, 7).
-define(Iotdb_common_TAggregationType_MIN_VALUE, 8).
-define(Iotdb_common_TAggregationType_EXTREME, 9).
-define(Iotdb_common_TAggregationType_COUNT_IF, 10).

-define(Iotdb_common_TrainingState_PENDING, 0).
-define(Iotdb_common_TrainingState_RUNNING, 1).
-define(Iotdb_common_TrainingState_FINISHED, 2).
-define(Iotdb_common_TrainingState_FAILED, 3).
-define(Iotdb_common_TrainingState_DROPPING, 4).

-define(Iotdb_common_ModelTask_FORECAST, 0).

-define(Iotdb_common_EvaluateMetric_MSE, 0).
-define(Iotdb_common_EvaluateMetric_MAE, 1).
-define(Iotdb_common_EvaluateMetric_RMSE, 2).

%% struct 'tEndPoint'

-record('tEndPoint', {'ip' :: string() | binary(),
                      'port' :: integer()}).
-type 'tEndPoint'() :: #'tEndPoint'{}.

%% struct 'tSStatus'

-record('tSStatus', {'code' :: integer(),
                     'message' :: string() | binary() | 'undefined',
                     'subStatus' :: list() | 'undefined',
                     'redirectNode' :: 'tEndPoint'() | 'undefined'}).
-type 'tSStatus'() :: #'tSStatus'{}.

%% struct 'tConsensusGroupId'

-record('tConsensusGroupId', {'type' :: integer(),
                              'id' :: integer()}).
-type 'tConsensusGroupId'() :: #'tConsensusGroupId'{}.

%% struct 'tSeriesPartitionSlot'

-record('tSeriesPartitionSlot', {'slotId' :: integer()}).
-type 'tSeriesPartitionSlot'() :: #'tSeriesPartitionSlot'{}.

%% struct 'tTimePartitionSlot'

-record('tTimePartitionSlot', {'startTime' :: integer()}).
-type 'tTimePartitionSlot'() :: #'tTimePartitionSlot'{}.

%% struct 'tRegionReplicaSet'

-record('tRegionReplicaSet', {'regionId' = #'tConsensusGroupId'{} :: 'tConsensusGroupId'(),
                              'dataNodeLocations' = [] :: list()}).
-type 'tRegionReplicaSet'() :: #'tRegionReplicaSet'{}.

%% struct 'tNodeResource'

-record('tNodeResource', {'cpuCoreNum' :: integer(),
                          'maxMemory' :: integer()}).
-type 'tNodeResource'() :: #'tNodeResource'{}.

%% struct 'tConfigNodeLocation'

-record('tConfigNodeLocation', {'configNodeId' :: integer(),
                                'internalEndPoint' = #'tEndPoint'{} :: 'tEndPoint'(),
                                'consensusEndPoint' = #'tEndPoint'{} :: 'tEndPoint'()}).
-type 'tConfigNodeLocation'() :: #'tConfigNodeLocation'{}.

%% struct 'tDataNodeLocation'

-record('tDataNodeLocation', {'dataNodeId' :: integer(),
                              'clientRpcEndPoint' = #'tEndPoint'{} :: 'tEndPoint'(),
                              'internalEndPoint' = #'tEndPoint'{} :: 'tEndPoint'(),
                              'mPPDataExchangeEndPoint' = #'tEndPoint'{} :: 'tEndPoint'(),
                              'dataRegionConsensusEndPoint' = #'tEndPoint'{} :: 'tEndPoint'(),
                              'schemaRegionConsensusEndPoint' = #'tEndPoint'{} :: 'tEndPoint'()}).
-type 'tDataNodeLocation'() :: #'tDataNodeLocation'{}.

%% struct 'tDataNodeConfiguration'

-record('tDataNodeConfiguration', {'location' = #'tDataNodeLocation'{} :: 'tDataNodeLocation'(),
                                   'resource' = #'tNodeResource'{} :: 'tNodeResource'()}).
-type 'tDataNodeConfiguration'() :: #'tDataNodeConfiguration'{}.

%% struct 'tFlushReq'

-record('tFlushReq', {'isSeq' :: string() | binary() | 'undefined',
                      'storageGroups' :: list() | 'undefined'}).
-type 'tFlushReq'() :: #'tFlushReq'{}.

%% struct 'tSettleReq'

-record('tSettleReq', {'paths' = [] :: list()}).
-type 'tSettleReq'() :: #'tSettleReq'{}.

%% struct 'tSchemaNode'

-record('tSchemaNode', {'nodeName' :: string() | binary(),
                        'nodeType' :: integer()}).
-type 'tSchemaNode'() :: #'tSchemaNode'{}.

%% struct 'tSetTTLReq'

-record('tSetTTLReq', {'storageGroupPathPattern' = [] :: list(),
                       'tTL' :: integer()}).
-type 'tSetTTLReq'() :: #'tSetTTLReq'{}.

%% struct 'tFile'

-record('tFile', {'fileName' :: string() | binary(),
                  'file' :: string() | binary()}).
-type 'tFile'() :: #'tFile'{}.

%% struct 'tFilesResp'

-record('tFilesResp', {'status' = #'tSStatus'{} :: 'tSStatus'(),
                       'files' = [] :: list()}).
-type 'tFilesResp'() :: #'tFilesResp'{}.

-endif.
