%%
%% Autogenerated by Thrift Compiler (0.19.0)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-ifndef(_iotdb_client_types_included).
-define(_iotdb_client_types_included, yeah).
-include("iotdb_common_types.hrl").


-define(Iotdb_client_TSProtocolVersion_IOTDB_SERVICE_PROTOCOL_V1, 0).
-define(Iotdb_client_TSProtocolVersion_IOTDB_SERVICE_PROTOCOL_V2, 1).
-define(Iotdb_client_TSProtocolVersion_IOTDB_SERVICE_PROTOCOL_V3, 2).

-define(Iotdb_client_TSConnectionType_THRIFT_BASED, 0).
-define(Iotdb_client_TSConnectionType_MQTT_BASED, 1).
-define(Iotdb_client_TSConnectionType_INTERNAL, 2).

%% struct 'tSQueryDataSet'

-record('tSQueryDataSet', {'time' :: string() | binary(),
                           'valueList' = [] :: list(),
                           'bitmapList' = [] :: list()}).
-type 'tSQueryDataSet'() :: #'tSQueryDataSet'{}.

%% struct 'tSQueryNonAlignDataSet'

-record('tSQueryNonAlignDataSet', {'timeList' = [] :: list(),
                                   'valueList' = [] :: list()}).
-type 'tSQueryNonAlignDataSet'() :: #'tSQueryNonAlignDataSet'{}.

%% struct 'tSTracingInfo'

-record('tSTracingInfo', {'activityList' = [] :: list(),
                          'elapsedTimeList' = [] :: list(),
                          'seriesPathNum' :: integer() | 'undefined',
                          'seqFileNum' :: integer() | 'undefined',
                          'unSeqFileNum' :: integer() | 'undefined',
                          'sequenceChunkNum' :: integer() | 'undefined',
                          'sequenceChunkPointNum' :: integer() | 'undefined',
                          'unsequenceChunkNum' :: integer() | 'undefined',
                          'unsequenceChunkPointNum' :: integer() | 'undefined',
                          'totalPageNum' :: integer() | 'undefined',
                          'overlappedPageNum' :: integer() | 'undefined'}).
-type 'tSTracingInfo'() :: #'tSTracingInfo'{}.

%% struct 'tSExecuteStatementResp'

-record('tSExecuteStatementResp', {'status' = #'tSStatus'{} :: 'tSStatus'(),
                                   'queryId' :: integer() | 'undefined',
                                   'columns' :: list() | 'undefined',
                                   'operationType' :: string() | binary() | 'undefined',
                                   'ignoreTimeStamp' :: boolean() | 'undefined',
                                   'dataTypeList' :: list() | 'undefined',
                                   'queryDataSet' :: 'tSQueryDataSet'() | 'undefined',
                                   'nonAlignQueryDataSet' :: 'tSQueryNonAlignDataSet'() | 'undefined',
                                   'columnNameIndexMap' :: map() | 'undefined',
                                   'sgColumns' :: list() | 'undefined',
                                   'aliasColumns' :: list() | 'undefined',
                                   'tracingInfo' :: 'tSTracingInfo'() | 'undefined',
                                   'queryResult' :: list() | 'undefined',
                                   'moreData' :: boolean() | 'undefined'}).
-type 'tSExecuteStatementResp'() :: #'tSExecuteStatementResp'{}.

%% struct 'tSOpenSessionResp'

-record('tSOpenSessionResp', {'status' = #'tSStatus'{} :: 'tSStatus'(),
                              'serverProtocolVersion' = 0 :: integer(),
                              'sessionId' :: integer() | 'undefined',
                              'configuration' :: map() | 'undefined'}).
-type 'tSOpenSessionResp'() :: #'tSOpenSessionResp'{}.

%% struct 'tSOpenSessionReq'

-record('tSOpenSessionReq', {'client_protocol' = 2 :: integer(),
                             'zoneId' :: string() | binary(),
                             'username' :: string() | binary(),
                             'password' :: string() | binary() | 'undefined',
                             'configuration' :: map() | 'undefined'}).
-type 'tSOpenSessionReq'() :: #'tSOpenSessionReq'{}.

%% struct 'tSCloseSessionReq'

-record('tSCloseSessionReq', {'sessionId' :: integer()}).
-type 'tSCloseSessionReq'() :: #'tSCloseSessionReq'{}.

%% struct 'tSExecuteStatementReq'

-record('tSExecuteStatementReq', {'sessionId' :: integer(),
                                  'statement' :: string() | binary(),
                                  'statementId' :: integer(),
                                  'fetchSize' :: integer() | 'undefined',
                                  'timeout' :: integer() | 'undefined',
                                  'enableRedirectQuery' :: boolean() | 'undefined',
                                  'jdbcQuery' :: boolean() | 'undefined'}).
-type 'tSExecuteStatementReq'() :: #'tSExecuteStatementReq'{}.

%% struct 'tSExecuteBatchStatementReq'

-record('tSExecuteBatchStatementReq', {'sessionId' :: integer(),
                                       'statements' = [] :: list()}).
-type 'tSExecuteBatchStatementReq'() :: #'tSExecuteBatchStatementReq'{}.

%% struct 'tSGetOperationStatusReq'

-record('tSGetOperationStatusReq', {'sessionId' :: integer(),
                                    'queryId' :: integer()}).
-type 'tSGetOperationStatusReq'() :: #'tSGetOperationStatusReq'{}.

%% struct 'tSCancelOperationReq'

-record('tSCancelOperationReq', {'sessionId' :: integer(),
                                 'queryId' :: integer()}).
-type 'tSCancelOperationReq'() :: #'tSCancelOperationReq'{}.

%% struct 'tSCloseOperationReq'

-record('tSCloseOperationReq', {'sessionId' :: integer(),
                                'queryId' :: integer() | 'undefined',
                                'statementId' :: integer() | 'undefined'}).
-type 'tSCloseOperationReq'() :: #'tSCloseOperationReq'{}.

%% struct 'tSFetchResultsReq'

-record('tSFetchResultsReq', {'sessionId' :: integer(),
                              'statement' :: string() | binary(),
                              'fetchSize' :: integer(),
                              'queryId' :: integer(),
                              'isAlign' :: boolean(),
                              'timeout' :: integer() | 'undefined'}).
-type 'tSFetchResultsReq'() :: #'tSFetchResultsReq'{}.

%% struct 'tSFetchResultsResp'

-record('tSFetchResultsResp', {'status' = #'tSStatus'{} :: 'tSStatus'(),
                               'hasResultSet' :: boolean(),
                               'isAlign' :: boolean(),
                               'queryDataSet' :: 'tSQueryDataSet'() | 'undefined',
                               'nonAlignQueryDataSet' :: 'tSQueryNonAlignDataSet'() | 'undefined',
                               'queryResult' :: list() | 'undefined',
                               'moreData' :: boolean() | 'undefined'}).
-type 'tSFetchResultsResp'() :: #'tSFetchResultsResp'{}.

%% struct 'tSFetchMetadataResp'

-record('tSFetchMetadataResp', {'status' = #'tSStatus'{} :: 'tSStatus'(),
                                'metadataInJson' :: string() | binary() | 'undefined',
                                'columnsList' :: list() | 'undefined',
                                'dataType' :: string() | binary() | 'undefined'}).
-type 'tSFetchMetadataResp'() :: #'tSFetchMetadataResp'{}.

%% struct 'tSFetchMetadataReq'

-record('tSFetchMetadataReq', {'sessionId' :: integer(),
                               'type' :: string() | binary(),
                               'columnPath' :: string() | binary() | 'undefined'}).
-type 'tSFetchMetadataReq'() :: #'tSFetchMetadataReq'{}.

%% struct 'tSGetTimeZoneResp'

-record('tSGetTimeZoneResp', {'status' = #'tSStatus'{} :: 'tSStatus'(),
                              'timeZone' :: string() | binary()}).
-type 'tSGetTimeZoneResp'() :: #'tSGetTimeZoneResp'{}.

%% struct 'tSSetTimeZoneReq'

-record('tSSetTimeZoneReq', {'sessionId' :: integer(),
                             'timeZone' :: string() | binary()}).
-type 'tSSetTimeZoneReq'() :: #'tSSetTimeZoneReq'{}.

%% struct 'tSInsertRecordReq'

-record('tSInsertRecordReq', {'sessionId' :: integer(),
                              'prefixPath' :: string() | binary(),
                              'measurements' = [] :: list(),
                              'values' :: string() | binary(),
                              'timestamp' :: integer(),
                              'isAligned' :: boolean() | 'undefined'}).
-type 'tSInsertRecordReq'() :: #'tSInsertRecordReq'{}.

%% struct 'tSInsertStringRecordReq'

-record('tSInsertStringRecordReq', {'sessionId' :: integer(),
                                    'prefixPath' :: string() | binary(),
                                    'measurements' = [] :: list(),
                                    'values' = [] :: list(),
                                    'timestamp' :: integer(),
                                    'isAligned' :: boolean() | 'undefined',
                                    'timeout' :: integer() | 'undefined'}).
-type 'tSInsertStringRecordReq'() :: #'tSInsertStringRecordReq'{}.

%% struct 'tSInsertTabletReq'

-record('tSInsertTabletReq', {'sessionId' :: integer(),
                              'prefixPath' :: string() | binary(),
                              'measurements' = [] :: list(),
                              'values' :: string() | binary(),
                              'timestamps' :: string() | binary(),
                              'types' = [] :: list(),
                              'size' :: integer(),
                              'isAligned' :: boolean() | 'undefined'}).
-type 'tSInsertTabletReq'() :: #'tSInsertTabletReq'{}.

%% struct 'tSInsertTabletsReq'

-record('tSInsertTabletsReq', {'sessionId' :: integer(),
                               'prefixPaths' = [] :: list(),
                               'measurementsList' = [] :: list(),
                               'valuesList' = [] :: list(),
                               'timestampsList' = [] :: list(),
                               'typesList' = [] :: list(),
                               'sizeList' = [] :: list(),
                               'isAligned' :: boolean() | 'undefined'}).
-type 'tSInsertTabletsReq'() :: #'tSInsertTabletsReq'{}.

%% struct 'tSInsertRecordsReq'

-record('tSInsertRecordsReq', {'sessionId' :: integer(),
                               'prefixPaths' = [] :: list(),
                               'measurementsList' = [] :: list(),
                               'valuesList' = [] :: list(),
                               'timestamps' = [] :: list(),
                               'isAligned' :: boolean() | 'undefined'}).
-type 'tSInsertRecordsReq'() :: #'tSInsertRecordsReq'{}.

%% struct 'tSInsertRecordsOfOneDeviceReq'

-record('tSInsertRecordsOfOneDeviceReq', {'sessionId' :: integer(),
                                          'prefixPath' :: string() | binary(),
                                          'measurementsList' = [] :: list(),
                                          'valuesList' = [] :: list(),
                                          'timestamps' = [] :: list(),
                                          'isAligned' :: boolean() | 'undefined'}).
-type 'tSInsertRecordsOfOneDeviceReq'() :: #'tSInsertRecordsOfOneDeviceReq'{}.

%% struct 'tSInsertStringRecordsOfOneDeviceReq'

-record('tSInsertStringRecordsOfOneDeviceReq', {'sessionId' :: integer(),
                                                'prefixPath' :: string() | binary(),
                                                'measurementsList' = [] :: list(),
                                                'valuesList' = [] :: list(),
                                                'timestamps' = [] :: list(),
                                                'isAligned' :: boolean() | 'undefined'}).
-type 'tSInsertStringRecordsOfOneDeviceReq'() :: #'tSInsertStringRecordsOfOneDeviceReq'{}.

%% struct 'tSInsertStringRecordsReq'

-record('tSInsertStringRecordsReq', {'sessionId' :: integer(),
                                     'prefixPaths' = [] :: list(),
                                     'measurementsList' = [] :: list(),
                                     'valuesList' = [] :: list(),
                                     'timestamps' = [] :: list(),
                                     'isAligned' :: boolean() | 'undefined'}).
-type 'tSInsertStringRecordsReq'() :: #'tSInsertStringRecordsReq'{}.

%% struct 'tSDeleteDataReq'

-record('tSDeleteDataReq', {'sessionId' :: integer(),
                            'paths' = [] :: list(),
                            'startTime' :: integer(),
                            'endTime' :: integer()}).
-type 'tSDeleteDataReq'() :: #'tSDeleteDataReq'{}.

%% struct 'tSCreateTimeseriesReq'

-record('tSCreateTimeseriesReq', {'sessionId' :: integer(),
                                  'path' :: string() | binary(),
                                  'dataType' :: integer(),
                                  'encoding' :: integer(),
                                  'compressor' :: integer(),
                                  'props' :: map() | 'undefined',
                                  'tags' :: map() | 'undefined',
                                  'attributes' :: map() | 'undefined',
                                  'measurementAlias' :: string() | binary() | 'undefined'}).
-type 'tSCreateTimeseriesReq'() :: #'tSCreateTimeseriesReq'{}.

%% struct 'tSCreateAlignedTimeseriesReq'

-record('tSCreateAlignedTimeseriesReq', {'sessionId' :: integer(),
                                         'prefixPath' :: string() | binary(),
                                         'measurements' = [] :: list(),
                                         'dataTypes' = [] :: list(),
                                         'encodings' = [] :: list(),
                                         'compressors' = [] :: list(),
                                         'measurementAlias' :: list() | 'undefined',
                                         'tagsList' :: list() | 'undefined',
                                         'attributesList' :: list() | 'undefined'}).
-type 'tSCreateAlignedTimeseriesReq'() :: #'tSCreateAlignedTimeseriesReq'{}.

%% struct 'tSRawDataQueryReq'

-record('tSRawDataQueryReq', {'sessionId' :: integer(),
                              'paths' = [] :: list(),
                              'fetchSize' :: integer() | 'undefined',
                              'startTime' :: integer(),
                              'endTime' :: integer(),
                              'statementId' :: integer(),
                              'enableRedirectQuery' :: boolean() | 'undefined',
                              'jdbcQuery' :: boolean() | 'undefined',
                              'timeout' :: integer() | 'undefined'}).
-type 'tSRawDataQueryReq'() :: #'tSRawDataQueryReq'{}.

%% struct 'tSLastDataQueryReq'

-record('tSLastDataQueryReq', {'sessionId' :: integer(),
                               'paths' = [] :: list(),
                               'fetchSize' :: integer() | 'undefined',
                               'time' :: integer(),
                               'statementId' :: integer(),
                               'enableRedirectQuery' :: boolean() | 'undefined',
                               'jdbcQuery' :: boolean() | 'undefined',
                               'timeout' :: integer() | 'undefined'}).
-type 'tSLastDataQueryReq'() :: #'tSLastDataQueryReq'{}.

%% struct 'tSAggregationQueryReq'

-record('tSAggregationQueryReq', {'sessionId' :: integer(),
                                  'statementId' :: integer(),
                                  'paths' = [] :: list(),
                                  'aggregations' = [] :: list(),
                                  'startTime' :: integer() | 'undefined',
                                  'endTime' :: integer() | 'undefined',
                                  'interval' :: integer() | 'undefined',
                                  'slidingStep' :: integer() | 'undefined',
                                  'fetchSize' :: integer() | 'undefined',
                                  'timeout' :: integer() | 'undefined'}).
-type 'tSAggregationQueryReq'() :: #'tSAggregationQueryReq'{}.

%% struct 'tSCreateMultiTimeseriesReq'

-record('tSCreateMultiTimeseriesReq', {'sessionId' :: integer(),
                                       'paths' = [] :: list(),
                                       'dataTypes' = [] :: list(),
                                       'encodings' = [] :: list(),
                                       'compressors' = [] :: list(),
                                       'propsList' :: list() | 'undefined',
                                       'tagsList' :: list() | 'undefined',
                                       'attributesList' :: list() | 'undefined',
                                       'measurementAliasList' :: list() | 'undefined'}).
-type 'tSCreateMultiTimeseriesReq'() :: #'tSCreateMultiTimeseriesReq'{}.

%% struct 'serverProperties'

-record('serverProperties', {'version' :: string() | binary(),
                             'supportedTimeAggregationOperations' = [] :: list(),
                             'timestampPrecision' :: string() | binary(),
                             'maxConcurrentClientNum' :: integer() | 'undefined',
                             'watermarkSecretKey' :: string() | binary() | 'undefined',
                             'watermarkBitString' :: string() | binary() | 'undefined',
                             'watermarkParamMarkRate' :: integer() | 'undefined',
                             'watermarkParamMaxRightBit' :: integer() | 'undefined',
                             'thriftMaxFrameSize' :: integer() | 'undefined',
                             'isReadOnly' :: boolean() | 'undefined',
                             'buildInfo' :: string() | binary() | 'undefined'}).
-type 'serverProperties'() :: #'serverProperties'{}.

%% struct 'tSSetSchemaTemplateReq'

-record('tSSetSchemaTemplateReq', {'sessionId' :: integer(),
                                   'templateName' :: string() | binary(),
                                   'prefixPath' :: string() | binary()}).
-type 'tSSetSchemaTemplateReq'() :: #'tSSetSchemaTemplateReq'{}.

%% struct 'tSCreateSchemaTemplateReq'

-record('tSCreateSchemaTemplateReq', {'sessionId' :: integer(),
                                      'name' :: string() | binary(),
                                      'serializedTemplate' :: string() | binary()}).
-type 'tSCreateSchemaTemplateReq'() :: #'tSCreateSchemaTemplateReq'{}.

%% struct 'tSAppendSchemaTemplateReq'

-record('tSAppendSchemaTemplateReq', {'sessionId' :: integer(),
                                      'name' :: string() | binary(),
                                      'isAligned' :: boolean(),
                                      'measurements' = [] :: list(),
                                      'dataTypes' = [] :: list(),
                                      'encodings' = [] :: list(),
                                      'compressors' = [] :: list()}).
-type 'tSAppendSchemaTemplateReq'() :: #'tSAppendSchemaTemplateReq'{}.

%% struct 'tSPruneSchemaTemplateReq'

-record('tSPruneSchemaTemplateReq', {'sessionId' :: integer(),
                                     'name' :: string() | binary(),
                                     'path' :: string() | binary()}).
-type 'tSPruneSchemaTemplateReq'() :: #'tSPruneSchemaTemplateReq'{}.

%% struct 'tSQueryTemplateReq'

-record('tSQueryTemplateReq', {'sessionId' :: integer(),
                               'name' :: string() | binary(),
                               'queryType' :: integer(),
                               'measurement' :: string() | binary() | 'undefined'}).
-type 'tSQueryTemplateReq'() :: #'tSQueryTemplateReq'{}.

%% struct 'tSQueryTemplateResp'

-record('tSQueryTemplateResp', {'status' = #'tSStatus'{} :: 'tSStatus'(),
                                'queryType' :: integer(),
                                'result' :: boolean() | 'undefined',
                                'count' :: integer() | 'undefined',
                                'measurements' :: list() | 'undefined'}).
-type 'tSQueryTemplateResp'() :: #'tSQueryTemplateResp'{}.

%% struct 'tSUnsetSchemaTemplateReq'

-record('tSUnsetSchemaTemplateReq', {'sessionId' :: integer(),
                                     'prefixPath' :: string() | binary(),
                                     'templateName' :: string() | binary()}).
-type 'tSUnsetSchemaTemplateReq'() :: #'tSUnsetSchemaTemplateReq'{}.

%% struct 'tSDropSchemaTemplateReq'

-record('tSDropSchemaTemplateReq', {'sessionId' :: integer(),
                                    'templateName' :: string() | binary()}).
-type 'tSDropSchemaTemplateReq'() :: #'tSDropSchemaTemplateReq'{}.

%% struct 'tSyncIdentityInfo'

-record('tSyncIdentityInfo', {'pipeName' :: string() | binary(),
                              'createTime' :: integer(),
                              'version' :: string() | binary(),
                              'database' :: string() | binary()}).
-type 'tSyncIdentityInfo'() :: #'tSyncIdentityInfo'{}.

%% struct 'tSyncTransportMetaInfo'

-record('tSyncTransportMetaInfo', {'fileName' :: string() | binary(),
                                   'startIndex' :: integer()}).
-type 'tSyncTransportMetaInfo'() :: #'tSyncTransportMetaInfo'{}.

%% struct 'tSBackupConfigurationResp'

-record('tSBackupConfigurationResp', {'status' = #'tSStatus'{} :: 'tSStatus'(),
                                      'enableOperationSync' :: boolean() | 'undefined',
                                      'secondaryAddress' :: string() | binary() | 'undefined',
                                      'secondaryPort' :: integer() | 'undefined'}).
-type 'tSBackupConfigurationResp'() :: #'tSBackupConfigurationResp'{}.

%% struct 'tSConnectionInfo'

-record('tSConnectionInfo', {'userName' :: string() | binary(),
                             'logInTime' :: integer(),
                             'connectionId' :: string() | binary(),
                             'type' :: integer()}).
-type 'tSConnectionInfo'() :: #'tSConnectionInfo'{}.

%% struct 'tSConnectionInfoResp'

-record('tSConnectionInfoResp', {'connectionInfoList' = [] :: list()}).
-type 'tSConnectionInfoResp'() :: #'tSConnectionInfoResp'{}.

-endif.
